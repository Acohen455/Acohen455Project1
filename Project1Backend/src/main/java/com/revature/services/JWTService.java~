@Service
public class CustomUserDetailsService implements UserDetailsService {

    @Autowired
    private UserDAO userDAO;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        // get the user from the database and instantiate it
        //if user isnt found, throw an error
        User user = userDAO.findByUsername(username).orElseThrow(
                        () -> new UsernameNotFoundException("User not found"));

        //convert the roles from the database into GrantedAuthority
        //GrantedAuthority is a list of roles that a user has that JWT can read
        //we grab the roles off the user model -- the DAO should retrieve them from the db
        //we then turn them into a list of granted authorities
        //the stream means we do these sequentially
        //we define a transform function for the data -- in this case turning them into auths
        List<GrantedAuthority> authorities = user.getRoles().stream()
                .map(role -> new SimpleGrantedAuthority("ROLE_" + user.getRole())).collect(Collectors.toList());

        return new org.springframework.security.core.userdetails.User(
                user.getUsername(),
                user.getPassword(),
                user.isEnabled(),
                true, //this field is for whether the account is expired
                true, //this is for checking if the credentials are expired
                true, //this is for locking the account
                authorities);


        return null;
    }
}